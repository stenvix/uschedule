// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using USchedule.Persistence.Database;

namespace USchedule.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsSystem");

                    b.Property<Guid>("LocationId");

                    b.Property<string>("ShortTitle")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<Guid>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("InstituteId");

                    b.Property<bool>("IsSystem");

                    b.Property<Guid?>("RoomId");

                    b.Property<string>("ShortTitle");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("RoomId");

                    b.HasIndex("Title", "InstituteId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Degree");

                    b.Property<Guid>("DepartmentId");

                    b.Property<int>("EntryYear");

                    b.Property<int>("StudyForm");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Title", "DepartmentId")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Institute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BuildingId");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("ShortTitle")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<Guid>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("UniversityId");

                    b.HasIndex("ShortTitle", "UniversityId")
                        .IsUnique();

                    b.HasIndex("Title", "UniversityId")
                        .IsUnique();

                    b.ToTable("Institutes");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Day");

                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("RoomId");

                    b.Property<Guid?>("SemesterId");

                    b.Property<int>("Subgroup");

                    b.Property<Guid>("TeacherSubjectId");

                    b.Property<Guid>("TimeId");

                    b.Property<int>("Type");

                    b.Property<int>("Week");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("TeacherSubjectId");

                    b.HasIndex("TimeId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.LessonTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("End");

                    b.Property<int>("Number");

                    b.Property<TimeSpan>("Start");

                    b.Property<Guid>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LessonTimes");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BuildingId");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Type");

                    b.Property<Guid>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<Guid>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.HasIndex("Title", "UniversityId")
                        .IsUnique();

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DepartmentId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.TeacherSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("SubjectId");

                    b.Property<Guid>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId", "SubjectId")
                        .IsUnique();

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ShortTitle")
                        .IsRequired();

                    b.Property<string>("Site");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ShortTitle")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Building", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("USchedule.Core.Entities.Implementations.University", "University")
                        .WithMany("Buildings")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Department", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("USchedule.Core.Entities.Implementations.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Group", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Institute", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("USchedule.Core.Entities.Implementations.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Lesson", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("USchedule.Core.Entities.Implementations.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("USchedule.Core.Entities.Implementations.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("USchedule.Core.Entities.Implementations.TeacherSubject", "TeacherSubject")
                        .WithMany()
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("USchedule.Core.Entities.Implementations.LessonTime", "LessonTime")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.LessonTime", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Room", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Semester", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Subject", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.Teacher", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("USchedule.Core.Entities.Implementations.TeacherSubject", b =>
                {
                    b.HasOne("USchedule.Core.Entities.Implementations.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("USchedule.Core.Entities.Implementations.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
